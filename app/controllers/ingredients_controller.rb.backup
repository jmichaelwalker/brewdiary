class IngredientsController < ApplicationController

  before_filter(except: ["login", "login_post", "logout"]) do
    if session[:member_id] != nil
      @member = Member.where(id: session[:member_id]).first
    else
      flash[:error] = "You must be logged in to see that page."
      redirect_to "/member_login" and return
    end
  end

  def index
    @title = "Ingredients List"
    @ingredients = Ingredient.order("id")
    render :index and return
  end

  def show
    @title = "Edit Ingredients"
    @ingredient = Ingredient.where(id: params["id"]).first
    render :show and return
  end

  def update
    @ingredient              = Ingredient.where(id: params["ingredient_id"]).first
    @ingredient.ing_name     = params["ingredient"]["ing_name"]
    @ingredient.ing_type     = params["ingredient"]["ing_type"]
    @ingredient.color        = params["ingredient"]["color"]
    @ingredient.srm_ibu      = params["ingredient"]["srm_ibu"]
    @ingredient.other        = params["ingredient"]["other"]

    if @ingredient.save
      redirect_to ingredients_path and return
    else
      render :update and return
    end
  end

  def new
    @ingredient = Ingredient.new
    render :new and return
  end
  
  def create
    @ingredient              = Ingredient.where(id: params["ingredient_id"]).first
    @ingredient.ing_name     = params["ingredient"]["ing_name"]
    @ingredient.ing_type     = params["ingredient"]["ing_type"]
    @ingredient.color        = params["ingredient"]["color"]
    @ingredient.srm_ibu      = params["ingredient"]["srm_ibu"]
    @ingredient.other        = params["ingredient"]["other"]

    if @ingredient.save
      redirect_to ingredients_path and return
    else
      render :new_ingredient and return
    end
  end

  def destroy
    @ingredient = Ingredient.where(id: params["id"]).first
    @ingredient.destroy
    redirect_to ingredients_path and return
  end

end

 